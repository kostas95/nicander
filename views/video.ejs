<body>
    <div class="container-fluid">
        <div class="row h-90 w-100">
            <div class="col-12 col-sm-6 d-flex justify-content-center">
                <div class="embed-responsive embed-responsive-16by9">
                    <video class="embed-responsive-item" muted></video>
                </div>
            </div>
            <div class="col-12 col-sm-6 d-flex justify-content-center">
                <div id="peerDiv" class="embed-responsive embed-responsive-16by9">
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/simple-peer/9.7.2/simplepeer.min.js"></script>
    <!-- <script src="../node_modules/simple-peer/simplepeer.min.js"></script> -->
</body>
    
<script>
    let socket = io()
    const video = document.querySelector('video')
    const filter = document.querySelector('#filter')
    const checkboxTheme = document.querySelector('#theme')
    let client = {}
    let currentFilter
    //get stream
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
            socket.emit('NewClient')
            video.srcObject = stream
            video.play()

            //used to initialize a peer
            function InitPeer(type) {
                let peer = new SimplePeer({ initiator: (type == 'init') ? true : false, stream: stream, trickle: false })
                peer.on('stream', function (stream) {
                    CreateDiv()

                    let video = document.createElement('video')
                    video.id = 'peerVideo'
                    video.srcObject = stream
                    video.setAttribute('class', 'embed-responsive-item')
                    document.querySelector('#peerDiv').appendChild(video)
                    video.play()
                    //wait for 1 sec

                    video.addEventListener('click', () => {
                        if (video.volume != 0)
                            video.volume = 0
                        else
                            video.volume = 1
                    })
                })
                peer.on('data', function (data) {
                    let decodedData = new TextDecoder('utf-8').decode(data)
                    let peervideo = document.querySelector('#peerVideo')
                    peervideo.style.filter = decodedData
                })
                return peer
            }

            socket.on('CreatePeer', function () {
                client.gotAnswer = false
                let peer = InitPeer('init')
                peer.on('signal', function (data) {
                    if (!client.gotAnswer) {
                        socket.emit('Offer', data)
                    }
                })
                client.peer = peer
            })

            socket.on('BackOffer', function (offer) {
                let peer = InitPeer('notInit')
                peer.on('signal', (data) => {
                    socket.emit('Answer', data)
                })
                peer.signal(offer)
                client.peer = peer
            })

            socket.on('BackAnswer', function (answer) {
                client.gotAnswer = true
                let peer = client.peer
                peer.signal(answer)
            })

            socket.on('SessionActive', function () {
                document.write('Session Active. Please come back later')
            })

            socket.on('Disconnect', function () {
                document.getElementById("peerVideo").remove();
                document.getElementById("muteText").remove();
                if (client.peer) {
                    client.peer.destroy()
                }
            })

        })
        .catch(err => document.write(err))

    function CreateDiv() {
        let div = document.createElement('div')
        div.setAttribute('class', "centered")
        div.id = "muteText"
        div.innerHTML = "Click to Mute/Unmute"
        document.querySelector('#peerDiv').appendChild(div)
    }

</script>